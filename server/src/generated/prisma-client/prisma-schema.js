module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateConsulting {
  count: Int!
}

type AggregateStudent {
  count: Int!
}

type AggregateStudentState {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Consulting {
  id: ID!
  student: Student!
  process: ProcessType!
  createdAt: DateTime!
}

type ConsultingConnection {
  pageInfo: PageInfo!
  edges: [ConsultingEdge]!
  aggregate: AggregateConsulting!
}

input ConsultingCreateInput {
  id: ID
  student: StudentCreateOneWithoutConsultingInput!
  process: ProcessType
}

input ConsultingCreateManyWithoutStudentInput {
  create: [ConsultingCreateWithoutStudentInput!]
  connect: [ConsultingWhereUniqueInput!]
}

input ConsultingCreateWithoutStudentInput {
  id: ID
  process: ProcessType
}

type ConsultingEdge {
  node: Consulting!
  cursor: String!
}

enum ConsultingOrderByInput {
  id_ASC
  id_DESC
  process_ASC
  process_DESC
  createdAt_ASC
  createdAt_DESC
}

type ConsultingPreviousValues {
  id: ID!
  process: ProcessType!
  createdAt: DateTime!
}

input ConsultingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  process: ProcessType
  process_not: ProcessType
  process_in: [ProcessType!]
  process_not_in: [ProcessType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ConsultingScalarWhereInput!]
  OR: [ConsultingScalarWhereInput!]
  NOT: [ConsultingScalarWhereInput!]
}

type ConsultingSubscriptionPayload {
  mutation: MutationType!
  node: Consulting
  updatedFields: [String!]
  previousValues: ConsultingPreviousValues
}

input ConsultingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConsultingWhereInput
  AND: [ConsultingSubscriptionWhereInput!]
  OR: [ConsultingSubscriptionWhereInput!]
  NOT: [ConsultingSubscriptionWhereInput!]
}

input ConsultingUpdateInput {
  student: StudentUpdateOneRequiredWithoutConsultingInput
  process: ProcessType
}

input ConsultingUpdateManyDataInput {
  process: ProcessType
}

input ConsultingUpdateManyMutationInput {
  process: ProcessType
}

input ConsultingUpdateManyWithoutStudentInput {
  create: [ConsultingCreateWithoutStudentInput!]
  delete: [ConsultingWhereUniqueInput!]
  connect: [ConsultingWhereUniqueInput!]
  set: [ConsultingWhereUniqueInput!]
  disconnect: [ConsultingWhereUniqueInput!]
  update: [ConsultingUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [ConsultingUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [ConsultingScalarWhereInput!]
  updateMany: [ConsultingUpdateManyWithWhereNestedInput!]
}

input ConsultingUpdateManyWithWhereNestedInput {
  where: ConsultingScalarWhereInput!
  data: ConsultingUpdateManyDataInput!
}

input ConsultingUpdateWithoutStudentDataInput {
  process: ProcessType
}

input ConsultingUpdateWithWhereUniqueWithoutStudentInput {
  where: ConsultingWhereUniqueInput!
  data: ConsultingUpdateWithoutStudentDataInput!
}

input ConsultingUpsertWithWhereUniqueWithoutStudentInput {
  where: ConsultingWhereUniqueInput!
  update: ConsultingUpdateWithoutStudentDataInput!
  create: ConsultingCreateWithoutStudentInput!
}

input ConsultingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: StudentWhereInput
  process: ProcessType
  process_not: ProcessType
  process_in: [ProcessType!]
  process_not_in: [ProcessType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ConsultingWhereInput!]
  OR: [ConsultingWhereInput!]
  NOT: [ConsultingWhereInput!]
}

input ConsultingWhereUniqueInput {
  id: ID
}

scalar DateTime

enum GenderType {
  MALE
  FEMALE
  RATHER_NOT_SAY
}

scalar Long

type Mutation {
  createConsulting(data: ConsultingCreateInput!): Consulting!
  updateConsulting(data: ConsultingUpdateInput!, where: ConsultingWhereUniqueInput!): Consulting
  updateManyConsultings(data: ConsultingUpdateManyMutationInput!, where: ConsultingWhereInput): BatchPayload!
  upsertConsulting(where: ConsultingWhereUniqueInput!, create: ConsultingCreateInput!, update: ConsultingUpdateInput!): Consulting!
  deleteConsulting(where: ConsultingWhereUniqueInput!): Consulting
  deleteManyConsultings(where: ConsultingWhereInput): BatchPayload!
  createStudent(data: StudentCreateInput!): Student!
  updateStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
  updateManyStudents(data: StudentUpdateManyMutationInput!, where: StudentWhereInput): BatchPayload!
  upsertStudent(where: StudentWhereUniqueInput!, create: StudentCreateInput!, update: StudentUpdateInput!): Student!
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteManyStudents(where: StudentWhereInput): BatchPayload!
  createStudentState(data: StudentStateCreateInput!): StudentState!
  updateStudentState(data: StudentStateUpdateInput!, where: StudentStateWhereUniqueInput!): StudentState
  updateManyStudentStates(data: StudentStateUpdateManyMutationInput!, where: StudentStateWhereInput): BatchPayload!
  upsertStudentState(where: StudentStateWhereUniqueInput!, create: StudentStateCreateInput!, update: StudentStateUpdateInput!): StudentState!
  deleteStudentState(where: StudentStateWhereUniqueInput!): StudentState
  deleteManyStudentStates(where: StudentStateWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum ProcessType {
  HIRED
  JOB_SEEKING
  IN_TRANSITION
  CONSTULING
  UNOCCUPIED
}

type Query {
  consulting(where: ConsultingWhereUniqueInput!): Consulting
  consultings(where: ConsultingWhereInput, orderBy: ConsultingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Consulting]!
  consultingsConnection(where: ConsultingWhereInput, orderBy: ConsultingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConsultingConnection!
  student(where: StudentWhereUniqueInput!): Student
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student]!
  studentsConnection(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentConnection!
  studentState(where: StudentStateWhereUniqueInput!): StudentState
  studentStates(where: StudentStateWhereInput, orderBy: StudentStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StudentState]!
  studentStatesConnection(where: StudentStateWhereInput, orderBy: StudentStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentStateConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum StatusType {
  LAYOFF
  WITHDRAW
  IN_PROGRESS
  HIRED
}

type Student {
  id: ID!
  profileImg: String
  name: String!
  gender: GenderType!
  birthDate: DateTime!
  email: String!
  consulting(where: ConsultingWhereInput, orderBy: ConsultingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Consulting!]
  studentState(where: StudentStateWhereInput, orderBy: StudentStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StudentState!]
}

type StudentConnection {
  pageInfo: PageInfo!
  edges: [StudentEdge]!
  aggregate: AggregateStudent!
}

input StudentCreateInput {
  id: ID
  profileImg: String
  name: String!
  gender: GenderType!
  birthDate: DateTime!
  email: String!
  consulting: ConsultingCreateManyWithoutStudentInput
  studentState: StudentStateCreateManyWithoutStudentInput
}

input StudentCreateOneWithoutConsultingInput {
  create: StudentCreateWithoutConsultingInput
  connect: StudentWhereUniqueInput
}

input StudentCreateOneWithoutStudentStateInput {
  create: StudentCreateWithoutStudentStateInput
  connect: StudentWhereUniqueInput
}

input StudentCreateWithoutConsultingInput {
  id: ID
  profileImg: String
  name: String!
  gender: GenderType!
  birthDate: DateTime!
  email: String!
  studentState: StudentStateCreateManyWithoutStudentInput
}

input StudentCreateWithoutStudentStateInput {
  id: ID
  profileImg: String
  name: String!
  gender: GenderType!
  birthDate: DateTime!
  email: String!
  consulting: ConsultingCreateManyWithoutStudentInput
}

type StudentEdge {
  node: Student!
  cursor: String!
}

enum StudentOrderByInput {
  id_ASC
  id_DESC
  profileImg_ASC
  profileImg_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
  birthDate_ASC
  birthDate_DESC
  email_ASC
  email_DESC
}

type StudentPreviousValues {
  id: ID!
  profileImg: String
  name: String!
  gender: GenderType!
  birthDate: DateTime!
  email: String!
}

type StudentState {
  id: ID!
  student: Student!
  statusType: StatusType!
  createdAt: DateTime!
}

type StudentStateConnection {
  pageInfo: PageInfo!
  edges: [StudentStateEdge]!
  aggregate: AggregateStudentState!
}

input StudentStateCreateInput {
  id: ID
  student: StudentCreateOneWithoutStudentStateInput!
  statusType: StatusType
}

input StudentStateCreateManyWithoutStudentInput {
  create: [StudentStateCreateWithoutStudentInput!]
  connect: [StudentStateWhereUniqueInput!]
}

input StudentStateCreateWithoutStudentInput {
  id: ID
  statusType: StatusType
}

type StudentStateEdge {
  node: StudentState!
  cursor: String!
}

enum StudentStateOrderByInput {
  id_ASC
  id_DESC
  statusType_ASC
  statusType_DESC
  createdAt_ASC
  createdAt_DESC
}

type StudentStatePreviousValues {
  id: ID!
  statusType: StatusType!
  createdAt: DateTime!
}

input StudentStateScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  statusType: StatusType
  statusType_not: StatusType
  statusType_in: [StatusType!]
  statusType_not_in: [StatusType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [StudentStateScalarWhereInput!]
  OR: [StudentStateScalarWhereInput!]
  NOT: [StudentStateScalarWhereInput!]
}

type StudentStateSubscriptionPayload {
  mutation: MutationType!
  node: StudentState
  updatedFields: [String!]
  previousValues: StudentStatePreviousValues
}

input StudentStateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudentStateWhereInput
  AND: [StudentStateSubscriptionWhereInput!]
  OR: [StudentStateSubscriptionWhereInput!]
  NOT: [StudentStateSubscriptionWhereInput!]
}

input StudentStateUpdateInput {
  student: StudentUpdateOneRequiredWithoutStudentStateInput
  statusType: StatusType
}

input StudentStateUpdateManyDataInput {
  statusType: StatusType
}

input StudentStateUpdateManyMutationInput {
  statusType: StatusType
}

input StudentStateUpdateManyWithoutStudentInput {
  create: [StudentStateCreateWithoutStudentInput!]
  delete: [StudentStateWhereUniqueInput!]
  connect: [StudentStateWhereUniqueInput!]
  set: [StudentStateWhereUniqueInput!]
  disconnect: [StudentStateWhereUniqueInput!]
  update: [StudentStateUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [StudentStateUpsertWithWhereUniqueWithoutStudentInput!]
  deleteMany: [StudentStateScalarWhereInput!]
  updateMany: [StudentStateUpdateManyWithWhereNestedInput!]
}

input StudentStateUpdateManyWithWhereNestedInput {
  where: StudentStateScalarWhereInput!
  data: StudentStateUpdateManyDataInput!
}

input StudentStateUpdateWithoutStudentDataInput {
  statusType: StatusType
}

input StudentStateUpdateWithWhereUniqueWithoutStudentInput {
  where: StudentStateWhereUniqueInput!
  data: StudentStateUpdateWithoutStudentDataInput!
}

input StudentStateUpsertWithWhereUniqueWithoutStudentInput {
  where: StudentStateWhereUniqueInput!
  update: StudentStateUpdateWithoutStudentDataInput!
  create: StudentStateCreateWithoutStudentInput!
}

input StudentStateWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  student: StudentWhereInput
  statusType: StatusType
  statusType_not: StatusType
  statusType_in: [StatusType!]
  statusType_not_in: [StatusType!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [StudentStateWhereInput!]
  OR: [StudentStateWhereInput!]
  NOT: [StudentStateWhereInput!]
}

input StudentStateWhereUniqueInput {
  id: ID
}

type StudentSubscriptionPayload {
  mutation: MutationType!
  node: Student
  updatedFields: [String!]
  previousValues: StudentPreviousValues
}

input StudentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StudentWhereInput
  AND: [StudentSubscriptionWhereInput!]
  OR: [StudentSubscriptionWhereInput!]
  NOT: [StudentSubscriptionWhereInput!]
}

input StudentUpdateInput {
  profileImg: String
  name: String
  gender: GenderType
  birthDate: DateTime
  email: String
  consulting: ConsultingUpdateManyWithoutStudentInput
  studentState: StudentStateUpdateManyWithoutStudentInput
}

input StudentUpdateManyMutationInput {
  profileImg: String
  name: String
  gender: GenderType
  birthDate: DateTime
  email: String
}

input StudentUpdateOneRequiredWithoutConsultingInput {
  create: StudentCreateWithoutConsultingInput
  update: StudentUpdateWithoutConsultingDataInput
  upsert: StudentUpsertWithoutConsultingInput
  connect: StudentWhereUniqueInput
}

input StudentUpdateOneRequiredWithoutStudentStateInput {
  create: StudentCreateWithoutStudentStateInput
  update: StudentUpdateWithoutStudentStateDataInput
  upsert: StudentUpsertWithoutStudentStateInput
  connect: StudentWhereUniqueInput
}

input StudentUpdateWithoutConsultingDataInput {
  profileImg: String
  name: String
  gender: GenderType
  birthDate: DateTime
  email: String
  studentState: StudentStateUpdateManyWithoutStudentInput
}

input StudentUpdateWithoutStudentStateDataInput {
  profileImg: String
  name: String
  gender: GenderType
  birthDate: DateTime
  email: String
  consulting: ConsultingUpdateManyWithoutStudentInput
}

input StudentUpsertWithoutConsultingInput {
  update: StudentUpdateWithoutConsultingDataInput!
  create: StudentCreateWithoutConsultingInput!
}

input StudentUpsertWithoutStudentStateInput {
  update: StudentUpdateWithoutStudentStateDataInput!
  create: StudentCreateWithoutStudentStateInput!
}

input StudentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  profileImg: String
  profileImg_not: String
  profileImg_in: [String!]
  profileImg_not_in: [String!]
  profileImg_lt: String
  profileImg_lte: String
  profileImg_gt: String
  profileImg_gte: String
  profileImg_contains: String
  profileImg_not_contains: String
  profileImg_starts_with: String
  profileImg_not_starts_with: String
  profileImg_ends_with: String
  profileImg_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  gender: GenderType
  gender_not: GenderType
  gender_in: [GenderType!]
  gender_not_in: [GenderType!]
  birthDate: DateTime
  birthDate_not: DateTime
  birthDate_in: [DateTime!]
  birthDate_not_in: [DateTime!]
  birthDate_lt: DateTime
  birthDate_lte: DateTime
  birthDate_gt: DateTime
  birthDate_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  consulting_every: ConsultingWhereInput
  consulting_some: ConsultingWhereInput
  consulting_none: ConsultingWhereInput
  studentState_every: StudentStateWhereInput
  studentState_some: StudentStateWhereInput
  studentState_none: StudentStateWhereInput
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
}

input StudentWhereUniqueInput {
  id: ID
}

type Subscription {
  consulting(where: ConsultingSubscriptionWhereInput): ConsultingSubscriptionPayload
  student(where: StudentSubscriptionWhereInput): StudentSubscriptionPayload
  studentState(where: StudentStateSubscriptionWhereInput): StudentStateSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  username: String!
  password: String!
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  username: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  username: String!
  password: String!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  username: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  username: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
`
      }
    