type User {
  id: ID!
  name: String!
  email: String!
  username: String!
}

type Student {
  id: ID!
  profileImg: String
  name: String!
  gender: String!
  birthDate: String!
  email: String!
  consulting: [Consulting]!
  studentState: [StudentState]!
  trainingInfo: [StudentsTraningRelation]
}

type Training {
  id: ID!
  title: String!
  dateStart: String!
  dateEnd: String!
  maxStudents: Int!
  studentsInfo: [StudentsTraningRelation]
  createdAt: String!
  updatedAt: String!
}

type Consulting {
  id: ID!
  student: Student!
  process: String!
  createdAt: String!
}

type StudentState {
  id: ID!
  student: Student!
  statusType: String!
  createdAt: String!
}

type AuthPayload {
  token: String
  user: User
}

type StudentsTraningRelation {
  id: ID
  student: Student!
  trainingCourse: Training!
  statusType: String!
}

type Query {
  users: [User]!
  students: [Student]!
  trainings: [Training]!
  trainingByTitle(title: String): [Training]!
}

type Mutation {
  signup(
    username: String!
    email: String!
    password: String!
    name: String!
  ): AuthPayload
  login(username: String!, password: String!): AuthPayload
}
